#!/usr/bin/env pythonimport jsonimport loggingfrom io import StringIOimport csvfrom celery.contrib import rdblogging.basicConfig(level=logging.DEBUG)class Csv2Json(object):    """Process a CSV string to a JSON string"""    def __init__(self, outline):        self.outline = outline        self._row_dict = {}    def _update_row_dict(self, row, prefix):        if not prefix:            self._row_dict = {}        else:            # clear anything that starts with the prefix, in case there's not the same number of rows            for key in self._row_dict:                if key.startswith('%s.' % prefix):                    self._row_dict[key] = None        for i in range(len(row)):            key = str(i)            if prefix is not None:                key = '%s.%s' % (prefix, key)            self._row_dict[key] = row[i]    def _get_collection(self, buffer, reader, outline, stop_at_type=None):        collection_attribute = outline.get('collection')        collection = {collection_attribute: []}        data = collection[collection_attribute]        last_position = buffer.tell()        for row in reader:            if not row:                continue            if stop_at_type and row[0] == stop_at_type:                buffer.seek(last_position)                break            row_outline = outline.get('outline')            outline_per_type = outline.get('outline_per_type')            if not outline_per_type or (outline_per_type and row[0] == outline_per_type):                row_data = {}                self._update_row_dict(row, outline_per_type)                for key in row_outline:                    if not (key == 'outline' and isinstance(row_outline[key], dict)):                        row_data[key] = self._row_dict.get(str(row_outline[key]))                    else:                        row_data.update(self._get_collection(buffer, reader, row_outline[key], outline_per_type))                data.append(row_data)            last_position = buffer.tell()        return collection    def convert(self, csv_str):        s = StringIO(csv_str)        reader = csv.reader(s, delimiter=',')        collection = self._get_collection(s, reader, self.outline)        s.close()        return json.dumps(collection)    def convert_edi_945_to_wof_shipment(self, csv_str):        # Convert 945 x12 EDI CSV document to Shipment JSON that Wombat can understand        data = {"message": "945",                "shipments": {}}        s = StringIO(csv_str)        reader = csv.reader(s, delimiter='|')        for row in reader:            if row and row[0] == 'HDR':                reference_id = row[5]                tracking_number = row[8] or row[42] or row[41]  # TrackingNumber, or ProNumber, or BOL                if not tracking_number:                    tracking_number = (row[30] or '') + '-' + row[7]  # CarrierCode-OrderNumber (e.g. FXNL-12345                name = row[21]                name_splits = name.split()                first_name = name_splits[0]                last_name = ' '.join(name_splits[1:])                shipment = data['shipments'].get(reference_id, {})                hdr = {                    "id": tracking_number,                    "record_type": row[0],                    "customer_id": row[1],                    "company": row[2],                    "warehouse": row[3],                    "load_number": row[4],                    "order_reference_id": row[5],                    "shipping_id": row[6],                    "order_id": row[7],                    "tracking_number": row[8],                    "shipped_at": row[9],                    "commit_date": row[10],                    "service": row[11],                    "lbs": row[12],                    "kgs": row[13],                    "gms": row[14],                    "ozs": row[15],                    "ship_ticket": row[16],                    "height": row[17],                    "width": row[18],                    "length": row[19],                    "ship_to_id_code": row[20],                    "email": row[22],                    "shipping_address": {                        "firstname": first_name,                        "lastname": last_name,                        "contact": row[22],                        "address1": row[23],                        "address2": row[24],                        "city": row[25],                        "state": row[26],                        "zipcode": row[27],                        "country": row[28],                        "phone": row[29]                    },                    "carrier": row[30],                    "shipping_method": row[31],                    "packet_list_ship_date": row[32],                    "routing": row[33],                    "ship_type": row[34],                    "ship_terms": row[35],                    "reporting_code": row[36],                    "depositor_order": row[37],                    "purchase_order": row[38],                    "delivery_date": row[39],                    "est_delivery": row[40],                    "bill_of_lading": row[41],                    "pro_number": row[42],                    "master_bill_of_lading": row[43],                    "split_ship_number": row[44],                    "invoice_date": row[45],                    "effective_date": row[46],                    "total_units": row[47],                    "total_weight": row[48],                    "uom_weight": row[49],                    "total_volume": row[50],                    "uom_volume": row[51],                    "lading_quantity": row[52],                    "unit_of_measure": row[53],                    "warehouse_name": row[54],                    "warehouse_id": row[55],                    "depositor_name": row[56],                    "depositor_id": row[57],                    "passthru_character_field_1": row[58],                    "passthru_character_field_2": row[59],                    "passthru_character_field_3": row[60],                    "passthru_character_field_4": row[61],                    "passthru_character_field_5": row[62],                    "passthru_character_field_6": row[63],                    "passthru_character_field_7": row[64],                    "passthru_character_field_8": row[65],                    "passthru_character_field_9": row[66],                    "passthru_character_field_10": row[67],                    "passthru_character_field_11": row[68],                    "passthru_character_field_12": row[69],                    "passthru_character_field_13": row[70],                    "passthru_character_field_14": row[71],                    "passthru_character_field_15": row[72],                    "passthru_character_field_16": row[73],                    "passthru_character_field_17": row[74],                    "passthru_character_field_18": row[75],                    "passthru_character_field_19": row[76],                    "passthru_character_field_20": row[77],                    "passthru_num_field_1": row[78],                    "passthru_num_field_2": row[79],                    "passthru_num_field_3": row[80],                    "passthru_num_field_4": row[81],                    "passthru_num_field_5": row[82],                    "passthru_num_field_6": row[83],                    "passthru_num_field_7": row[84],                    "passthru_num_field_8": row[85],                    "passthru_num_field_9": row[86],                    "passthru_num_field_10": row[87],                    "passthru_date_field_1": row[88],                    "passthru_date_field_2": row[89],                    "passthru_date_field_3": row[90],                    "passthru_date_field_4": row[91],                    "passthru_dollar_field_1": row[92],                    "passthru_dollar_field_2": row[93],                    "trailer": row[94],                    "seal": row[95],                    "pallet_count": row[96],                    "freight_cost": row[97],                    "late_ship_reason": row[98],                    "carrier_del_serv": row[99],                    "shipping_cost": row[100],                    "pro_number_or_all_tracking_numbers": row[101],                    "tracking": tracking_number,                }                shipment.update({"HDR": hdr})                data['shipments'].update({reference_id: shipment})            if row and row[0] == "DTL":                reference_id = row[1]                item_reference_id = row[4]                shipment = data['shipments'].get(reference_id, {})                items = shipment.get("ITEMS", {})                item = items.get(item_reference_id, {})                dtl = {                    "record_type": row[0],                    "orderid": row[1],                    "shipid": row[2],                    "custid": row[3],                    "assignedid": row[4],                    "shipticket": row[5],                    "trackingno": row[6],                    "servicecode": row[7],                    "lbs": row[8],                    "kgs": row[9],                    "gms": row[10],                    "ozs": row[11],                    "item": row[12],                    "lotnumber": row[13],                    "link_lotnumber": row[14],                    "inventoryclass": row[15],                    "statuscode": row[16],                    "reference": row[17],                    "linenumber": row[18],                    "orderdate": row[19],                    "po": row[20],                    "qtyordered": row[21],                    "qtyshipped": row[22],                    "qtydiff": row[23],                    "uom": row[24],                    "packlistshipdate": row[25],                    "weight": row[26],                    "weightquailfier": row[27],                    "weightunit": row[28],                    "description": row[29],                    "upc": row[30],                    "dtlpassthruchar01": row[31],                    "dtlpassthruchar02": row[32],                    "dtlpassthruchar03": row[33],                    "dtlpassthruchar04": row[34],                    "dtlpassthruchar05": row[35],                    "dtlpassthruchar06": row[36],                    "dtlpassthruchar07": row[37],                    "dtlpassthruchar08": row[38],                    "dtlpassthruchar09": row[39],                    "dtlpassthruchar10": row[40],                    "dtlpassthruchar11": row[41],                    "dtlpassthruchar12": row[42],                    "dtlpassthruchar13": row[43],                    "dtlpassthruchar14": row[44],                    "dtlpassthruchar15": row[45],                    "dtlpassthruchar16": row[46],                    "dtlpassthruchar17": row[47],                    "dtlpassthruchar18": row[48],                    "dtlpassthruchar19": row[49],                    "dtlpassthruchar20": row[50],                    "dtlpassthrunum01": row[51],                    "dtlpassthrunum02": row[52],                    "dtlpassthrunum03": row[53],                    "dtlpassthrunum04": row[54],                    "dtlpassthrunum05": row[55],                    "dtlpassthrunum06": row[56],                    "dtlpassthrunum07": row[57],                    "dtlpassthrunum08": row[58],                    "dtlpassthrunum09": row[59],                    "dtlpassthrunum10": row[60],                    "dtlpassthrudate01": row[61],                    "dtlpassthrudate02": row[62],                    "dtlpassthrudate03": row[63],                    "dtlpassthrudate04": row[64],                    "dtlpassthrudoll01": row[65],                    "dtlpassthrudoll02": row[66],                    "fromlpid": row[67],                    "smallpackagelbs": row[68],                    "deliveryservice": row[69],                    "entereduom": row[70],                    "qtyshippedeuom": row[71]                }                item.update({"DTL": dtl})                items.update({item_reference_id: item})                shipment.update({"ITEMS": items})                data['shipments'].update({reference_id: shipment})            if row and row[0] == "LOT":                reference_id = row[1]                item_reference_id = row[4]                shipment = data['shipments'].get(reference_id, {})                items = shipment.get("ITEMS", {})                item = items.get(item_reference_id, {})                lot = {                    "record_type": row[0],                    "orderid": row[1],                    "shipid": row[2],                    "custid": row[3],                    "assignedid": row[4],                    "item": row[5],                    "lotnumber": row[6],                    "qtyshipped": row[7],                    "qtyordered": row[8]                }                item.update({"LOT": lot})                items.update({item_reference_id: item})                shipment.update({"ITEMS": items})                data['shipments'].update({reference_id: shipment})            if row and row[0] == "CNT":                reference_id = row[1]                item_reference_id = row[12]                shipment = data['shipments'].get(reference_id, {})                items = shipment.get("ITEMS", {})                item = items.get(item_reference_id, {})                cnt = {                    "record_type": row[0],                    "order_id": row[1],                    "shipping_id": row[2],                    "customer_id": row[3],                    "lpid": row[4],                    "fromlpid": row[5],                    "plt_sscc18": row[6],                    "ctn_sscc18": row[7],                    "tracking_number": row[8],                    "link_plt_sscc18": row[9],                    "link_ctn_sscc18": row[10],                    "link_tracking_number": row[11],                    "id": row[12],                    "product_id": row[13],                    "lotnumber": row[14],                    "link_lotnumber": row[15],                    "useritem1": row[16],                    "useritem2": row[17],                    "useritem3": row[18],                    "quantity": row[19],                    "unit_of_measure": row[20],                    "cartons": row[21],                    "detail_passthru_character_field_1": row[22],                    "detail_passthru_character_field_2": row[23],                    "detail_passthru_character_field_3": row[24],                    "detail_passthru_character_field_4": row[25],                    "detail_passthru_character_field_5": row[26],                    "detail_passthru_character_field_6": row[27],                    "detail_passthru_character_field_7": row[28],                    "detail_passthru_character_field_8": row[29],                    "detail_passthru_character_field_9": row[30],                    "detail_passthru_character_field_10": row[31],                    "detail_passthru_character_field_11": row[32],                    "detail_passthru_character_field_12": row[33],                    "detail_passthru_character_field_13": row[34],                    "detail_passthru_character_field_14": row[35],                    "detail_passthru_character_field_15": row[36],                    "detail_passthru_character_field_16": row[37],                    "detail_passthru_character_field_17": row[38],                    "detail_passthru_character_field_18": row[39],                    "detail_passthru_character_field_19": row[40],                    "detail_passthru_character_field_20": row[41],                    "detail_passthru_number_field_1": row[42],                    "detail_passthru_number_field_2": row[43],                    "detail_passthru_number_field_3": row[44],                    "detail_passthru_number_field_4": row[45],                    "detail_passthru_number_field_5": row[46],                    "detail_passthru_number_field_6": row[47],                    "detail_passthru_number_field_7": row[48],                    "detail_passthru_number_field_8": row[49],                    "detail_passthru_number_field_9": row[50],                    "detail_passthru_number_field_10": row[51],                    "detail_passthru_date_field_1": row[52],                    "detail_passthru_date_field_2": row[53],                    "detail_passthru_date_field_3": row[54],                    "detail_passthru_date_field_4": row[55],                    "detail_passthru_dollar_field_1": row[56],                    "detail_passthru_dollar_field_2": row[57],                    "purchase_order": row[58],                    "weight": row[59],                    "volume": row[60]                }                item.update({"CNT": cnt})                items.update({item_reference_id: item})                shipment.update({"ITEMS": items})                data['shipments'].update({reference_id: shipment})            if row and row[0] == "ID":                reference_id = row[1]                shipment = data['shipments'].get(reference_id, {})                id = {                    "record_type": row[0],                    "orderid": row[1],                    "shipid": row[2],                    "custid": row[3],                    "lpid": row[4],                    "fromlpid": row[5],                    "plt_sscc18": row[6],                    "ctn_sscc18": row[7],                    "trackingno": row[8],                    "link_plt_sscc18": row[9],                    "link_ctn_sscc18": row[10],                    "link_trackingno": row[11],                    "cartons": row[12],                }                shipment.update({"ID": id})                data['shipments'].update({reference_id: shipment})        return json.dumps(data)    def convert_edi_944_to_wof_shipment(self, csv_str):        # Convert 944 x12 EDI CSV document to Shipment JSON that Wombat can understand        data = {"message": "944",                "receipts": []}        s = StringIO(csv_str)        reader = csv.reader(s, delimiter=',')        header_row = None        for row in reader:            if row[0] == 'HDR':                header_row = row                selected_receipt = None            elif row[0] == 'DTL':                if not selected_receipt:                    shipper_first_name = ""                    shipper_last_name = ""                    bill_to_first_name = ""                    bill_to_last_name = ""                    shipper_name = header_row[63]                    shipper_name_splits = shipper_name.split()                    if shipper_name_splits:                        shipper_first_name = shipper_name_splits[0]                        shipper_last_name = ' '.join(shipper_name_splits[1:])                    bill_to_name = header_row[63]                    bill_to_name_splits = bill_to_name.split()                    if bill_to_name_splits:                        bill_to_first_name = bill_to_name_splits[0]                        bill_to_last_name = ' '.join(bill_to_name_splits[1:])                    selected_receipt = {                        "id": header_row[13],                        "record_type": header_row[0],                        "customer": header_row[1],                        "transaction_set": header_row[2],                        "direction": header_row[3],                        "synapse_order_id": header_row[4],                        "synapse_ship_id": header_row[5],                        "warehouse_receipt_number": header_row[6],                        "customer_order_number": header_row[7],                        "receipt_data": header_row[8],                        "vendor": header_row[9],                        "shipping_name": header_row[10],                        "bol_number": header_row[11],                        "carrier": header_row[12],                        "purchase_order_number": header_row[13],                        "order_type": header_row[14],                        "total_quantity_expected": header_row[15],                        "total_quantity_received": header_row[16],                        "total_quantity_received_in_good_condition": header_row[17],                        "total_quantity_received_in_damaged_condition": header_row[18],                        "date_unloaded": header_row[19],                        "ship_type": header_row[20],                        "warehouse_name": header_row[21],                        "passthru_character_field_1": header_row[22],                        "passthru_character_field_2": header_row[23],                        "passthru_character_field_3": header_row[24],                        "passthru_character_field_4": header_row[25],                        "passthru_character_field_5": header_row[26],                        "passthru_character_field_6": header_row[27],                        "passthru_character_field_7": header_row[28],                        "passthru_character_field_8": header_row[29],                        "passthru_character_field_9": header_row[30],                        "passthru_character_field_10": header_row[31],                        "passthru_character_field_11": header_row[32],                        "passthru_character_field_12": header_row[33],                        "passthru_character_field_13": header_row[34],                        "passthru_character_field_14": header_row[35],                        "passthru_character_field_15": header_row[36],                        "passthru_character_field_16": header_row[37],                        "passthru_character_field_17": header_row[38],                        "passthru_character_field_18": header_row[39],                        "passthru_character_field_19": header_row[40],                        "passthru_character_field_20": header_row[41],                        "passthru_num_field_1": header_row[42],                        "passthru_num_field_2": header_row[43],                        "passthru_num_field_3": header_row[44],                        "passthru_num_field_4": header_row[45],                        "passthru_num_field_5": header_row[46],                        "passthru_num_field_6": header_row[47],                        "passthru_num_field_7": header_row[48],                        "passthru_num_field_8": header_row[49],                        "passthru_num_field_9": header_row[50],                        "passthru_num_field_10": header_row[51],                        "passthru_date_field_1": header_row[52],                        "passthru_date_field_2": header_row[53],                        "passthru_date_field_3": header_row[54],                        "passthru_date_field_4": header_row[55],                        "passthru_dollar_field_1": header_row[56],                        "passthru_dollar_field_2": header_row[57],                        "pro_number": header_row[58],                        "trailer": header_row[59],                        "seal": header_row[60],                        "pallet_count": header_row[61],                        "facility": header_row[62],                        "shipper": {                            "firstname": shipper_first_name,                            "lastname": shipper_last_name,                            "contact": header_row[64],                            "address1": header_row[65],                            "address2": header_row[66],                            "zipcode": header_row[67],                            "city": header_row[68],                            "state": header_row[69],                            "country": header_row[70],                            "phone": header_row[71],                            "fax": header_row[72],                            "email": header_row[73]                        },                        "bill_to": {                            "firstname": bill_to_first_name,                            "lastname": bill_to_last_name,                            "address1": header_row[76],                            "address2": header_row[77],                            "zipcode": header_row[78],                            "city": header_row[79],                            "state": header_row[80],                            "country": header_row[81],                            "phone": header_row[82],                            "fax": header_row[83],                            "email": header_row[84]                        },                        "rma": header_row[85],                        "return_tracking_number": header_row[86],                        "last_user": header_row[87],                        "order_header_comments": header_row[88],                        "items": []                    }                    data['receipts'].append(selected_receipt)                selected_receipt['items'].append({                    "record_type": row[0],                    "line_number": row[1],                    "item": row[2],                    "item_description": row[3],                    "lot_number": row[4],                    "unit_of_measure": row[5],                    "quantity_received": row[6],                    "cube_received": row[7],                    "quantity_received_in_good_condition": row[8],                    "cube_of_product_received_in_good_condition": row[9],                    "quantity_received_in_damaged_condition": row[10],                    "quantity_ordered": row[11],                    "item_weight": row[12],                    "weight_qualifier": row[13],                    "weight_uom": row[14],                    "volume": row[15],                    "volume_uom": row[16],                    "detail_passthru_character_field_1": row[17],                    "detail_passthru_character_field_2": row[18],                    "detail_passthru_character_field_3": row[19],                    "detail_passthru_character_field_4": row[20],                    "detail_passthru_character_field_5": row[21],                    "detail_passthru_character_field_6": row[22],                    "detail_passthru_character_field_7": row[23],                    "detail_passthru_character_field_8": row[24],                    "detail_passthru_character_field_9": row[25],                    "detail_passthru_character_field_10": row[26],                    "detail_passthru_character_field_11": row[27],                    "detail_passthru_character_field_12": row[28],                    "detail_passthru_character_field_13": row[29],                    "detail_passthru_character_field_14": row[30],                    "detail_passthru_character_field_15": row[31],                    "detail_passthru_character_field_16": row[32],                    "detail_passthru_character_field_17": row[33],                    "detail_passthru_character_field_18": row[34],                    "detail_passthru_character_field_19": row[35],                    "detail_passthru_character_field_20": row[36],                    "detail_passthru_num_field_1": row[37],                    "detail_passthru_num_field_2": row[38],                    "detail_passthru_num_field_3": row[39],                    "detail_passthru_num_field_4": row[40],                    "detail_passthru_num_field_5": row[41],                    "detail_passthru_num_field_6": row[42],                    "detail_passthru_num_field_7": row[43],                    "detail_passthru_num_field_8": row[44],                    "detail_passthru_num_field_9": row[45],                    "detail_passthru_num_field_10": row[46],                    "detail_passthru_date_field_1": row[47],                    "detail_passthru_date_field_2": row[48],                    "detail_passthru_date_field_3": row[49],                    "detail_passthru_date_field_4": row[50],                    "detail_passthru_dollar_field_1": row[51],                    "detail_passthru_dollar_field_2": row[52],                    "quantity_on_hold": row[53],                    "inventory_status_of_the_quantity_received": row[54],                    "serial_number": row[55],                    "user_item_1": row[56],                    "user_item_2": row[57],                    "user_item_3": row[58],                    "original_line_number": row[59],                    "unload_date": row[60],                    "condition": row[61],                    "inventory_class": row[62],                    # "synapse_order_id": row[63] or "",                    # "synapse_ship_id": row[64] or "",                })        s.close()        return json.dumps(data)# return_dict = {#     "shipments": [#         {#             "ORDER ID": {#                 "HDR": {},#                 "ID": {},#                 "ITEMS": {#                     "ITEM ID": {#                         "DTL": {},#                         "LOT": {},#                         "CNT": {}#                     }#                 }#             }#         },#         {#             "ORDER ID": {#                 "HDR": {},#                 "ID": {},#                 "ITEMS": {#                     "ITEM ID": {#                         "DTL": {},#                         "LOT": {},#                         "CNT": {}#                     }#                 }#             }#         }#     ]# }